section .text: ;tell linker to put this section in the text segment
    global _start ;tell linker entry point

_start: ;tell linker entry point
    mov ecx, [num1] ;move first number to ecx
    cmp ecx, [num2] ;compare first number to second number
    jle check_third_num ;if first number is less than or equal to second number, check third number
    mov ecx, [num2] ;if first number is greater than second number, move second number to ecx
    
check_third_num: ;check third number
    cmp ecx, [num3] ;compare ecx to third number
    jle _exit ;if ecx is less than or equal to third number, exit
    mov ecx, [num3] ;if ecx is greater than third number, move third number to ecx
    
_exit: ;exit
    mov [smallest], ecx ;move smallest number to smallest
    mov ecx,msg ;message to display
    mov edx, len ;length of message
    mov ebx,1 ;file descriptor (stdout)
    mov eax,4 ;system call number (sys_write)
    int 0x80 ;call kernel
    mov ecx,smallest ;smallest number to display
    mov edx, 2 ;length of smallest number
    mov ebx,1 ;file descriptor (stdout)
    mov eax,4 ;system call number (sys_write)
    int 0x80 ;call kernel
    mov eax, 1 ;system call number (sys_exit)
    int 80h ;exit
    
section .data ;tell linker to put this section in the data segment
    msg db "The smallest digit is: ", 0xA,0xD ;message to display
    len equ $- msg ;length of message
    num1 dd '1' ;first number
    num2 dd '2' ;second number 
    num3 dd '7' ;third number

segment .bss ;tell linker to put this section in the bss segment
    smallest resb 10 ;smallest number