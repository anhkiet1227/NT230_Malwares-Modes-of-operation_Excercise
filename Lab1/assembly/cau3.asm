section .text ;tell linker to put this section in the text segment
    global _start ;tell linker to start at _start

_start: ;start of the program
    mov eax, [num1] ;put the first number in eax
    mov ebx, [num2] ;put the second number in ebx
    cmp eax, ebx ;compare the first number and the second number
    jle .case1 ;if the first number is less than or equal to the second number, jump to .else
    mov eax, [num2] ;put the second number in eax
    mov ebx, [num3] ;put the third number in ebx
    cmp eax, ebx ;compare the second number and the third number
    jle .case2 ;if the second number is less than or equal to the third number, jump to .case2
    mov eax, [num3] ;put the third number in eax
    jmp .exit ;jump to .exit

.case1: ;if the first number is greater than the second number
    mov eax, [num1] ;put the first number in eax
    mov ebx, [num3] ;put the third number in ebx
    cmp eax, ebx ;compare the first number and the third number
    jle .case3 ;if the first number is less than or equal to the third number, jump to .case3
    mov eax, [num3] ;put the third number in eax
    jmp .exit ;jump to .exit

.case2: ;if the second number is greater than the third number
    mov eax, [num1] ;put the first number in eax
    mov ebx, [num2] ;put the second number in ebx
    cmp eax, ebx ;compare the first number and the second number
    jle .case3 ;if the first number is less than or equal to the second number, jump to .case3 
    mov eax, [num2] ;put the second number in eax
    jmp .exit ;jump to .exit

.case3: ;if the first number is greater than the third number
    mov eax, [num1] ;put the first number in eax

.exit: ;exit of the program
    mov [smallest], eax ;put the minimum number in the smallest variable
    mov eax, 4 ;put the system call number 4 in eax
    mov ebx, 1 ;put the file descriptor 1 in ebx
    mov ecx, msg1 ;put the address of the message 4 in ecx
    mov edx, len1 ;put the length of the message 4 in edx
    int 0x80 ;call the system call
    mov eax, 4 ;put the system call number 4 in eax
    mov ebx, 1 ;put the file descriptor 1 in ebx
    mov ecx, smallest ;put the address of the smallest variable in ecx
    mov edx, 4 ;put the length of the smallest variable in edx
    int 0x80 ;call the system call
    mov eax, 1 ;put the system call number 1 in eax
    mov ebx, 0 ;put the exit code 0 in ebx
    int 0x80 ;call the system call

section .data ;tell linker to put this section in the data segment
    msg1 db "The minimum number is: ", 0xa, 0x0 ;announce the minimum number
    len1 equ $ - msg1 ;get the length of the message 4
    num1 dd '123' ;first number
    num2 dd '245' ;second number 
    num3 dd '712' ;third number

section .bss ;tell linker to put this section in the bss segment
    smallest resd 1 ;reserve 4 bytes for the minimum number